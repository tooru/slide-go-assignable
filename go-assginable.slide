Goのインタフェースと代入
横浜Go読書会 #15
7 Apr 2018

Tooru Takahashi

@tooru

https://github.com/tooru/slide-go-assignable


* 話すこと

- 経緯
- 代入可能とは
- 問題
- まとめ

* 経緯

- 「Goなら分かるシステムプログラミング」のp19のコードに不可解な代入文がありました(下記17行目)。
- 一見、型が違いそうですがコンパイルエラーにはなりません。[[https://play.golang.org/p/k0pLFTs_3YY][📌 Playground]]

.code -numbers src/main.go /^type Talker/,

* なぜ代入できるのか

- 「ある変数にある値が代入できる」とはどういうことでしょうか？
- ということで
- [[https://golang.org/ref/spec][Goの言語仕様 (The Go Programming Language Specification)]] を(少し)読んでみたという発表です。

❗️ ️注意:現状(Version of February 1, 2018)時点での言語仕様です。

* 代入可能とは？ (1/3) Assinablity 

.link https://golang.org/ref/spec#Assignability

.code slide/assignability.txt

- 3番目の「TがInterface型でxがTを実装している」が該当しそうです
- Talkerの例では「 `Talker` がInterface型で `&Greeter{"wozozo"}` がTを実装している」といえれば代入可能です
- では、xがTを実装しているとは？？

* 代入可能とは？ (2/3) Interface Types

.link https://golang.org/ref/spec#Interface_types

.code slide/interfaceTypes.txt

- インタフェースのメソッドセット(メソッドの集まり)全てを持つ型は、そのインタフェースを *実装している* といえる
- Talkerの例では `&Greeter{"wozozo"}` の型である `Greeter` のポインタ型 が `Talk()` を持っていれば実装しているということ、、でも、、

.code -numbers src/main.go /^func \(g Greeter\)/

- 実装しているといって良いものか
- これは、メソッドセットの仕様に書いてありました。

* 代入可能とは？ (3/3) Method Sets

.link https://golang.org/ref/spec#Method_sets

.code slide/methodSets.txt

- 4番目がポイントです。「Tのポインタ型のメソッドセットはレシーバの型が * *TまたはTであるすべてのメソッド* 」とあります。
- Talkerの例では `&Greeter{"wozozo"}` の型である `Greeter` のポインタ のメソッドセットは、 `*Greeter` だけでなく `Greeter` をレシーバにとるメソッドを含めて良いです。よって、

.code -numbers src/main.go /^func \(g Greeter\)/

- `*Greeter` のメソッドセットに含めて良いです。

* まとめると

- `&Greeter{"wozozo"}` の型である `*Greeter` は、メソッドセットに func(g Greeter) Talk() を持つことから `Talker` インタフェースのメソッドセットを全て持ちます。
- そのため、`&Greeter{"wozozo"}` は `Talker` インタフェースを実装しているといえ、`Talker` 型(の変数)に代入可能です。

- 長くなりましたが、言語仕様上問題ない代入であることが分かりました。

* では問題です

次のプログラムはどうなるでしょうか？

.code -numbers src/main2.go /^type Talker/,

選択問題
.code slide/main2question.txt

* 答え

- 🤐🤐🤐「2. コンパイルエラー」 が正解です。[[https://play.golang.org/p/jR948qwF7cA][📌 Playground]]
- なぜか？
- 先ほど見たメソッドセットの仕様に書かれています。3番目です。

.link https://golang.org/ref/spec#Method_sets

.code slide/methodSets.txt /The method set of any other type T/,

- *T型は*T型またはT型をレシーバに持つメソッドをメソッドセットとしていましたが、T型はT型をレシーバに持つメソッドだけをメソッドセットとします
- `Greeter` 型はレシーバが `*Greeter` 型のメソッドをメソッドセットに含められないということです。
- なにやら非対称ですね。なぜでしょうか。

* 具象型とポインタ型でメソッドセットが非対称な理由

- GolangのWikiにその理由らしき記述を見つけました
- [[https://github.com/golang/go/wiki/MethodSets#interfaces][Method Set golang/go wiki]]

.code slide/notAddressable.txt

- T型の値をインタフェース型の変数に代入すると、その値はアドレス化できない(not addressable)ため、レシーバに*T型を含むメソッドをメソッドセットに含められない(メソッドが呼び出せない）ということのようです。
- Wikiにあるサンプルコードを見ると理解できると思います。[[https://play.golang.org/p/seSNPNNbPqh][📌 Playground]]にも貼り付けました。


: Therefore, when you call a method on an interface, it must either have an identical
: receiver type or it must be directly discernible from the concrete type:
: pointer- and value-receiver methods can be called with pointers and values respectively,
: as you would expect.

: したがって、インターフェイス上のメソッドを呼び出すときは、同一のレシーバタイプを持つか具象型から
: 直接認識でき(discernible)なければならない。
: ポインタレシーバメソッドと値レシーバメソッドはそれぞれポインタと値で呼び出すことができます。

* さらに問題

コンパイルできるでしょうか？

.code -numbers src/main3.go /^type Greeter/,/(4)/

選択問題
.code slide/main3question.txt

* 答え

- 🤐🤐🤐「2. (2)と(3)はコンパイルエラー」 が正解です。[[https://play.golang.org/p/c3ePsIq3sho][📌 Playground]]

.link https://golang.org/ref/spec#Assignability

.code slide/assignability.txt /x's type is identical to T./

- 具象型やポインタ型への変数への代入は、同じ型でないと代入できません。
- 代入する変数の型がインタフェース型ではないので、メソッドセットの話は今回関係ありません。
- メソッドセットはインタフェースを実装しているかどうかの判断に使います。

* まとめ

💡 具象型やポインタ型への代入は、同じ型でないと代入できません。

💡 インタフェース型への代入は特殊です。

- I型がインタフェース型の時、I型のメソッドセットを持つ型の値を代入可能です。
- T型はT型をレシーバに持つメソッドのみをメソッドセットとします
- *T型は*T型に加えT型をレシーバに持つメソッドをメソッドセットとします
- T型のメソッドセットに*T型をレシーバに持つメソッドを含めないのは、T型をインタフェースに代入した時に、その値が格納されているアドレスを取得できないためのようです。(メソッドが呼び出せない）

💡 分からなくなったら、言語仕様を読んでみましょう🙂


* 参考情報

🔖 [[https://golang.org/ref/spec][The Go Programming Language Specification]]

- Goの言語仕様

🔖 [[https://github.com/golang/go/wiki/MethodSets#interfaces][Method Set golang/go wiki]]

- Github golang/go リポジトリのWiki

🔖 [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methods, Interfaces and Embedded Types in Go]]

- Go in Actionの著者 William Kennedy (@goinggodotnet) の記事 (2014年)
- 今回触れなかったEmbedded Fields (Type)についても書かれています

🔖 [[https://github.com/LambdaNote/errata-gosyspro-1-1/issues/29][Goならわかるシステムプログラミング 19ページの正誤情報]]

* Appendix 1. (1/3) 復習問題前半

.code -numbers src/main4.go /^type Talker/,/END OMIT/

- コード続きます

* Appendix 1. (2/3) 復習問題後半

- 各代入文の結果は？

.code -numbers src/main4.go /^func main/,/(10)

* Appendix 1. (3/3) 復習問題回答

.code -numbers src/main4ans.go /^func main/,/(10)


[[https://play.golang.org/p/hLtu6CaA0xj][📌 Playground]] でもご確認ください

* Appendix 2. (1/3) メソッド呼び出し問題前半

- 呼び出しルールにも非対称な部分があります。インタフェースへの代入と混ぜて覚えないように。

.code -numbers src/main4.go /^type Greeter/,/END OMIT/

- コード続きます

* Appendix 2. (2/3) メソッド呼び出し問題後半

.code -numbers src/main5.go /^func main/,

- 各呼び出しは妥当でしょうか？

* Appendix 2. (2/3) メソッド呼び出し問題回答

.code -numbers src/main5ans.go /^func main/,

- (10)は構造体リテラルのままなのでアドレス化できません。(2)のように変数に代入していればOKです。

[[https://play.golang.org/p/hQ_JweIGtq1][📌 Playground]] でもご確認ください

